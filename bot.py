import logging
import os
import sqlite3
import re
from datetime import datetime, date, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import calendar

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8041866728:AAGaQGnSE0JR7Oyt8fJg8aV6A_9AWxxXv_E"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–∞—à Telegram ID)
ADMIN_ID = 189380617

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_NAME = "food_requests.db"
EXCEL_FOLDER = os.path.join(os.getcwd(), "excel_reports")
os.makedirs(EXCEL_FOLDER, exist_ok=True)
logger.info(f"–ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤: {EXCEL_FOLDER}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE,
        full_name TEXT,
        last_update DATE
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫ (–¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è submission_date –∏ submission_time)
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS requests (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        meal_date DATE,          -- –î–∞—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è
        submission_date DATE,    -- –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
        submission_time TIME,    -- –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
        canteen TEXT,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )
    ''')
    
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_meal_date = State()
    waiting_for_canteen = State()

# ================= –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ =================

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT full_name FROM users WHERE telegram_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    if user:
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user[0]}!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.",
            reply_markup=create_main_menu(user_id == ADMIN_ID))
        await state.clear()
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–§–∞–º–∏–ª–∏—è –ò.–û.</b>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <b>–ò–≤–∞–Ω–æ–≤ –ò.–ò.</b>",
            parse_mode="HTML"
        )
        await state.set_state(Form.waiting_for_name)

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu(is_admin=False):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üçΩ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"))
    builder.add(KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û"))
    builder.add(KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ"))
    
    if is_admin:
        builder.add(KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        builder.add(KeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"))
        builder.add(KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É"))
    
    builder.adjust(2, 2, 2)
    return builder.as_markup(resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞)
@dp.message(Form.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    full_name = message.text.strip()
    user_id = message.from_user.id
    today = date.today()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –§–ò–û
    if not re.match(r'^[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å]\.[–ê-–Ø–Å]\.$', full_name):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–§–∞–º–∏–ª–∏—è –ò.–û.</b>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <b>–ò–≤–∞–Ω–æ–≤ –ò.–ò.</b>\n"
            "–§–∞–º–∏–ª–∏—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã, –∑–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã —Å —Ç–æ—á–∫–∞–º–∏ (–ò.–û.).",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user_id,))
        user = cursor.fetchone()
        
        if user:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                "UPDATE users SET full_name = ?, last_update = ? WHERE telegram_id = ?",
                (full_name, today, user_id))
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                "INSERT INTO users (telegram_id, full_name, last_update) VALUES (?, ?, ?)",
                (user_id, full_name, today))
        
        conn.commit()
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ, {full_name}! –í–∞—à–µ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=create_main_menu(user_id == ADMIN_ID)
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {full_name}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –§–ò–û: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        conn.close()
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û"
@dp.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û")
async def change_name_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–§–∞–º–∏–ª–∏—è –ò.–û.</b>:", 
                         reply_markup=ReplyKeyboardRemove(),
                         parse_mode="HTML")
    await state.set_state(Form.waiting_for_name)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
@dp.message(F.text == "üçΩ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def order_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id, full_name FROM users WHERE telegram_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ (–∑–∞–≤—Ç—Ä–∞, –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞, —á–µ—Ä–µ–∑ 2 –¥–Ω—è)
    today = date.today()
    dates = [
        today + timedelta(days=1),
        today + timedelta(days=2),
        today + timedelta(days=3)
    ]
    
    builder = ReplyKeyboardBuilder()
    for d in dates:
        builder.add(KeyboardButton(text=d.strftime("%d.%m.%Y")))
    builder.add(KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    builder.adjust(3, 1)
    
    await message.answer(
        f"{user[1]}, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–∏—Ç–∞–Ω–∏—è:",
        reply_markup=builder.as_markup(resize_keyboard=True))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.update_data(user_id=user[0], full_name=user[1])
    await state.set_state(Form.waiting_for_meal_date)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø–∏—Ç–∞–Ω–∏—è
@dp.message(Form.waiting_for_meal_date)
async def process_meal_date(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu(message.from_user.id == ADMIN_ID))
        await state.clear()
        return
    
    date_str = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
        for fmt in ("%d.%m.%Y", "%d.%m.%y", "%d/%m/%Y", "%d/%m/%y", "%Y-%m-%d"):
            try:
                meal_date = datetime.strptime(date_str, fmt).date()
                break
            except ValueError:
                continue
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        today = date.today()
        if meal_date < today:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
            return
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.update_data(meal_date=meal_date)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–æ–ª–æ–≤–æ–π
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–¶–µ–Ω—Ç—Ä"))
    builder.add(KeyboardButton(text="–Ø—Å—Ç—Ä–µ–±"))
    builder.add(KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    builder.adjust(2, 1)
    
    await message.answer(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {meal_date.strftime('%d.%m.%Y')}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–æ–≤—É—é:",
        reply_markup=builder.as_markup(resize_keyboard=True))
    
    await state.set_state(Form.waiting_for_canteen)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–æ–≤–æ–π (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–∞—á–∏)
@dp.message(Form.waiting_for_canteen)
async def process_canteen(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        user_data = await state.get_data()
        full_name = user_data.get('full_name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
        today = date.today()
        dates = [
            today + timedelta(days=1),
            today + timedelta(days=2),
            today + timedelta(days=3)
        ]
        
        builder = ReplyKeyboardBuilder()
        for d in dates:
            builder.add(KeyboardButton(text=d.strftime("%d.%m.%Y")))
        builder.add(KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
        builder.adjust(3, 1)
        
        await message.answer(
            f"{full_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–∏—Ç–∞–Ω–∏—è:",
            reply_markup=builder.as_markup(resize_keyboard=True))
        await state.set_state(Form.waiting_for_meal_date)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç–æ–ª–æ–≤–∞—è
    if message.text not in ["–¶–µ–Ω—Ç—Ä", "–Ø—Å—Ç—Ä–µ–±"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–æ–≤—É—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    
    canteen = message.text
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    meal_date = data.get('meal_date')
    user_id_db = data.get('user_id')
    full_name = data.get('full_name')
    
    if not meal_date or not user_id_db:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –§–∏–∫—Å–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
    submission_datetime = datetime.now()
    submission_date = submission_datetime.date()
    submission_time = submission_datetime.time()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        cursor.execute(
            "SELECT id FROM requests WHERE user_id = ? AND meal_date = ?",
            (user_id_db, meal_date.strftime("%Y-%m-%d"))
        )
        existing_request = cursor.fetchone()
        
        if existing_request:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
            cursor.execute(
                "UPDATE requests SET canteen = ?, submission_date = ?, submission_time = ? WHERE id = ?",
                (canteen, submission_date.strftime("%Y-%m-%d"), submission_time.strftime("%H:%M:%S"), existing_request[0]))
            action_msg = "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
            cursor.execute(
                "INSERT INTO requests (user_id, meal_date, submission_date, submission_time, canteen) VALUES (?, ?, ?, ?, ?)",
                (user_id_db, meal_date.strftime("%Y-%m-%d"), submission_date.strftime("%Y-%m-%d"), submission_time.strftime("%H:%M:%S"), canteen))
            action_msg = "–ø–æ–¥–∞–Ω–∞"
        
        conn.commit()
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ –≤ —Å—Ç–æ–ª–æ–≤–æ–π '{canteen}' {action_msg} –Ω–∞ {meal_date.strftime('%d.%m.%Y')}!\n"
            f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {submission_date.strftime('%d.%m.%Y')}\n"
            f"‚è∞ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {submission_time.strftime('%H:%M:%S')}",
            reply_markup=create_main_menu(user_id == ADMIN_ID))
        logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {user_id} -> {canteen} –Ω–∞ {meal_date}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        conn.close()
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel" (—Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–∞—á–∏)
@dp.message(F.text == "üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
async def export_handler(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –±–µ–∑ –ø—Ä–∞–≤")
        return
    
    try:
        logger.info("–ù–∞—á–∞–ª–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        query = """
        SELECT 
            u.full_name AS –§–ò–û,
            r.meal_date AS –î–∞—Ç–∞_–ø–∏—Ç–∞–Ω–∏—è,
            r.submission_date AS –î–∞—Ç–∞_–ø–æ–¥–∞—á–∏,
            r.submission_time AS –í—Ä–µ–º—è_–ø–æ–¥–∞—á–∏,
            r.canteen AS –°—Ç–æ–ª–æ–≤–∞—è
        FROM requests r
        JOIN users u ON u.id = r.user_id
        ORDER BY r.meal_date DESC, u.full_name
        """
        
        logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å...")
        cursor.execute(query)
        rows = cursor.fetchall()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î")
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        if not rows:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            conn.close()
            logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª
        wb = Workbook()
        ws = wb.active
        ws.title = "–ó–∞—è–≤–∫–∏"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–§–ò–û", "–î–∞—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏", "–°—Ç–æ–ª–æ–≤–∞—è"]
        ws.append(headers)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        bold_font = Font(bold=True)
        center_alignment = Alignment(horizontal='center')
        
        for col in range(1, 5):
            cell = ws.cell(row=1, column=col)
            cell.font = bold_font
            cell.alignment = center_alignment
        
        # –î–∞–Ω–Ω—ã–µ
        for row in rows:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            meal_date = datetime.strptime(row[1], "%Y-%m-%d").strftime("%d.%m.%Y")
            submission_date = datetime.strptime(row[2], "%Y-%m-%d").strftime("%d.%m.%Y")
            submission_time = row[3]  # –í—Ä–µ–º—è —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏
            full_submission = f"{submission_date} {submission_time}"
            
            ws.append([row[0], meal_date, full_submission, row[4]])
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        ws.column_dimensions['A'].width = 30
        ws.column_dimensions['B'].width = 15
        ws.column_dimensions['C'].width = 20  # –£–≤–µ–ª–∏—á–∏–º –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∞—Ç—ã-–≤—Ä–µ–º–µ–Ω–∏
        ws.column_dimensions['D'].width = 15
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        today_str = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        excel_filename = f"meal_requests_{today_str}.xlsx"
        excel_path = os.path.join(EXCEL_FOLDER, excel_filename)
        wb.save(excel_path)
        logger.info(f"Excel-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {excel_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(excel_path)
        logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_document(
            types.FSInputFile(excel_path, filename=excel_filename),
            caption=f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ ({len(rows)} –∑–∞–ø–∏—Å–µ–π)"
        )
        logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}", exc_info=True)
        await message.answer(error_msg)
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É"
@dp.message(F.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É")
async def clear_db_handler(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("DELETE FROM requests")
        cursor.execute("DELETE FROM users")
        conn.commit()
        
        await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!")
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ë–î: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ"
@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def delete_me_handler(message: types.Message):
    user_id = message.from_user.id
    
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("DELETE FROM requests WHERE user_id IN (SELECT id FROM users WHERE telegram_id = ?)", (user_id,))
        
        # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("DELETE FROM users WHERE telegram_id = ?", (user_id,))
        conn.commit()
        
        if cursor.rowcount > 0:
            await message.answer("‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã!", reply_markup=ReplyKeyboardRemove())
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ")
        else:
            await message.answer("‚ÑπÔ∏è –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_handler(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM users")
        users_count = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
        cursor.execute("SELECT COUNT(*) FROM requests")
        requests_count = cursor.fetchone()[0]
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞
        cursor.execute("SELECT MAX(meal_date) FROM requests")
        last_meal_date = cursor.fetchone()[0] or "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–æ–ª–æ–≤—ã–º
        cursor.execute("SELECT canteen, COUNT(*) FROM requests GROUP BY canteen")
        canteen_stats = cursor.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º
        cursor.execute("SELECT meal_date, COUNT(*) FROM requests GROUP BY meal_date ORDER BY meal_date DESC LIMIT 7")
        date_stats = cursor.fetchall()
        
        stats_message = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            f"üìù –ó–∞—è–≤–æ–∫: {requests_count}\n"
            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è: {last_meal_date}\n\n"
            "üçΩÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–æ–ª–æ–≤—ã–º:\n"
        )
        
        for canteen, count in canteen_stats:
            stats_message += f"- {canteen}: {count} –∑–∞—è–≤–æ–∫\n"
        
        stats_message += "\nüìÖ –ó–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
        for meal_date, count in date_stats:
            stats_message += f"- {meal_date}: {count} –∑–∞—è–≤–æ–∫\n"
        
        await message.answer(stats_message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    finally:
        conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders():
    try:
        logger.info("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        today = date.today()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—É–¥–Ω–∏–π –ª–∏ –¥–µ–Ω—å (–ø–Ω-–ø—Ç = 0-4)
        if today.weekday() < 5:  # 0-–ø–Ω, 4-–ø—Ç
            conn = sqlite3.connect(DB_NAME)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT telegram_id, full_name FROM users")
            users = cursor.fetchall()
            
            for user_id, full_name in users:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                tomorrow = today + timedelta(days=1)
                cursor.execute(
                    "SELECT COUNT(*) FROM requests r JOIN users u ON u.id = r.user_id WHERE u.telegram_id = ? AND r.meal_date = ?",
                    (user_id, tomorrow.strftime("%Y-%m-%d"))
                )
                has_request = cursor.fetchone()[0] == 0
                
                if has_request:
                    try:
                        await bot.send_message(
                            user_id,
                            f"‚è∞ {full_name}, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m.%Y')})!\n"
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üçΩ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'"
                        )
                        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user_id}: {e}")
            
            conn.close()
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def unknown_command(message: types.Message):
    await message.answer(
        "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.",
        reply_markup=create_main_menu(message.from_user.id == ADMIN_ID)
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        await bot.send_message(
            ADMIN_ID, 
            "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n"
            f"–ü–∞–ø–∫–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏: {EXCEL_FOLDER}\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.\n\n"
            "–û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:\n"
            "- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò.–û.)\n"
            "- –†–∞–∑–¥–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏\n"
            "- –£–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel\n"
            "- –ü–æ–¥—Ä–æ–±–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–æ–∫"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler = AsyncIOScheduler()
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –±—É–¥–Ω–∏–π –¥–µ–Ω—å –≤ 16:00 –ø–æ –ú–æ—Å–∫–≤–µ
    scheduler.add_job(
        send_reminders,
        trigger=CronTrigger(day_of_week="mon-fri", hour=16, minute=0, timezone="Europe/Moscow"),
    )
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω (–±—É–¥–Ω–∏ –≤ 16:00)")
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())